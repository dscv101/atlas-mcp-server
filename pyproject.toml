[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "atlas-mcp-server"
version = "3.0.0"
description = "ATLAS (Adaptive Task & Logic Automation System): A Python MCP server enabling LLM agents to manage projects, tasks, and knowledge via KuzuDB-backed, three-tier architecture."
readme = "README.md"
license = {text = "Apache-2.0"}
authors = [
    {name = "cyanheads", email = "casey@caseyjhand.com"}
]
maintainers = [
    {name = "cyanheads", email = "casey@caseyjhand.com"}
]
keywords = [
    "ai-integration",
    "agent",
    "atlas",
    "automation",
    "fastmcp",
    "graph-database",
    "knowledge-management",
    "kuzu",
    "kuzudb",
    "llm",
    "llm-agent",
    "mcp",
    "model-context-protocol",
    "project-management",
    "python",
    "task-management",
    "workflow-automation"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Office/Business :: Groupware",
]
requires-python = ">=3.13"
dependencies = [
    "fastmcp>=2.10.0",
    "kuzu>=0.6.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "structlog>=23.2.0",
    "click>=8.1.0",
    "rich>=13.7.0",
    "httpx>=0.26.0",
    "asyncio-mqtt>=0.16.0",
    "uvloop>=0.19.0; sys_platform != 'win32'",
]



[project.urls]
Homepage = "https://github.com/dscv101/atlas-mcp-server"
Repository = "https://github.com/dscv101/atlas-mcp-server.git"
Issues = "https://github.com/dscv101/atlas-mcp-server/issues"
Documentation = "https://github.com/dscv101/atlas-mcp-server#readme"

[project.scripts]
atlas-mcp-server = "atlas_mcp.main:main"

[tool.hatch.build.targets.wheel]
packages = ["src/atlas_mcp"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/README.md",
    "/LICENSE",
]

[tool.hatch.envs.default]
dependencies = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "ruff>=0.1.0",
    "black>=23.12.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=atlas_mcp --cov=tests {args:tests}"
lint = "ruff check {args:.}"
format = "ruff format {args:.}"
type-check = "mypy {args:src/atlas_mcp tests}"
all = ["lint", "format", "type-check", "test"]

[tool.hatch.envs.docs]
dependencies = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.5.0",
]

[tool.hatch.envs.docs.scripts]
build = "mkdocs build --clean --strict"
serve = "mkdocs serve --dev-addr localhost:8000"

# Ruff configuration
[tool.ruff]
target-version = "py313"
line-length = 100

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "ARG002", # unused method argument
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["ARG", "S101"]

[tool.ruff.lint.isort]
known-first-party = ["atlas_mcp"]

# Black configuration
[tool.black]
target-version = ["py313"]
line-length = 100
skip-string-normalization = true

# MyPy configuration
[tool.mypy]
python_version = "3.13"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "kuzu.*",
    "fastmcp.*",
    "asyncio_mqtt.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=atlas_mcp",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
